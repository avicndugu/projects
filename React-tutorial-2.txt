
28th March 2020
I decided to have another go at React after testing a little bit on Vue.

I had a selection of tutorials to follow along.
I settled on two:
Tania Rascia's tutorial
React's official Tic-tac-toe tutorial 


11:55- 12:12
Installed a new project here.
    npx create-react-app react-tutorial-2
    cd react-tutorial-2
    yarn start

You can now view react-tutorial-2 in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://192.168.43.11:3000



12:12- 13:06
React: used to build user interfaces UI's
Build complex UI's by building small parts called components.

There are different kind of components
1. React.Component subclasses

    class ShoppingList extends React.Component {
      render() {
        return (
          <div className="shopping-list">
            <h1>Shopping List for {this.props.name}</h1>
            <ul>
              <li>Instagram</li>
              <li>WhatsApp</li>
              <li>Oculus</li>
            </ul>
          </div>
        );
      }
    }

    // Example usage: <ShoppingList name="Mark" />

Components tell react what it should show on screen/ display.
A component takes in parameters, called props (short for “properties”), and returns a hierarchy of views to display via the render method.( I have no Idea what this means at this particular time).

The render method returns a description of what you want to see on the screen. React takes the description and displays the result.

Each React component is encapsulated and can operate independently; this allows you to build complex UIs from simple components.

Delete files inside src by:
rm -f *
touch index.js index.css

Copy starter code for index.js and index.css

Inspecting the code, you’ll notice that we have three React components:
Square
Board
Game
They have this syntax:
    class Square extends React.Component {
        render() {
            return (
            
            )
        }
    }


Passing a props from parent to child
Parent:
    class Board extends React.Component {
      renderSquare(i) {
        return <Square value={i} />;
      }

Child:
    class Square extends React.Component {
      render() {
        return (
          <button className="square">
            {this.props.value}
          </button>
        );
      }
    }

Passing props is how information flows in React apps, from parents to children.

Click event handler:
    <button className="square" onClick={()=>{alert("clicked")}}>
        {this.props.value}
      </button>

Components use state to remember what has happened.
React components can have state by setting this.state in their constructors. this.state should be considered as private to a React component that it’s defined in.

class Square extends React.Component {
  constructor(props){
    super(props);
    this.state= {
      value:null
    };
  }
  render() {
    return (
      <button className="square" onClick={()=>{alert("clicked")}}>
        {this.props.value}
      </button>
    );
  }
}



Finally instead of alert, let there be an X inside the square.
    class Square extends React.Component {
      constructor(props) {
        super(props);
        this.state = {
          value: null,
        };
      }

      render() {
        return (
          <button
            className="square"
            onClick={() => this.setState({value: 'X'})}
          >
            {this.state.value}
          </button>
        );
      }
    }


By calling this.setState from an onClick handler in the Square’s render method, we tell React to re-render that Square whenever its <button> is clicked. After the update, the Square’s this.state.value will be 'X', so we’ll see the X on the game board. If you click on any Square, an X should show up.
When you call setState in a component, React automatically updates the child components inside of it too.


In JavaScript classes, you need to always call super when defining the constructor of a subclass. All React component classes that have a constructor should start with a super(props) call.



Added git ignore for node modules
made a first commit.
Components

13:06- 13:37
Practice making simple components on personal project.
Day 1: 1 hour 42 minutes


Day 2
1638-

Data is handled using properties(props) and state


Create an array of objects that will contain the data to be added to the table.
This data should go to the most top level component.

class App extends React.Component {
  render() {
    const characters = [
      {
        name: "Character",
        job: "Janitor"
      },
      {
        name: "Mac",
        job: "Bouncer"
      }
    ]
    return (
      <div className="app">
        <Table />
        <NewTable />
      </div>
    )
  }
}

Pass the data to the child component (Table) with properties.
Give the property a name: characterData
<NewTable characterData={characters}/>


Accessing the data on the child NewTable
const { characterData } = this.props

Pass the data to the child TableBody
<TableBody characterData= {characterData}/>




Lets pass the headings of the table as props
1. Create an object in App component
const tableHeadings = {
      column1: "Name",
      column2: "Job"
    }

2. Pass it to the child component Table

<Table tableHeadings= { tableHeadings }/>

